name: Deploy with Manual Approval

on:
  push:
    branches:
      - dev

jobs:
  build-and-verify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Mock Install Dependencies
        run: |
          echo "Installing dependencies..."
          echo "Dependencies installed successfully!"

      - name: Mock Build Project
        run: |
          echo "Building project..."
          echo "Project built successfully!"

      - name: Mock Tests
        run: |
          echo "Running tests..."
          echo "All tests passed successfully!"

  create-and-merge-pr:
    needs: build-and-verify
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: dev

      - name: Create Release PR
        id: create-pr
        uses: repo-sync/pull-request@v2
        with:
          source_branch: "dev"
          destination_branch: "main"
          github_token: ${{ secrets.PAT_TOKEN }}
          pr_title: "Production Release: ${{ github.event.head_commit.timestamp }}"
          pr_body: |
            Automated production release from dev branch
            
            This PR was automatically created and will be merged upon approval.
            Approving and merging this PR will trigger the production deployment.

      - name: Wait for PR Review
        id: wait-for-review
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const maxAttempts = 30; // 5 minutes with 10-second intervals
            let attempts = 0;
            
            while (attempts < maxAttempts) {
              try {
                const { data: pr } = await github.rest.pulls.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: ${{ steps.create-pr.outputs.pr_number }}
                });
                
                const { data: reviews } = await github.rest.pulls.listReviews({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: ${{ steps.create-pr.outputs.pr_number }}
                });
                
                const approved = reviews.some(review => review.state === 'APPROVED');
                
                if (approved) {
                  console.log('PR approved - proceeding with merge');
                  core.setOutput('approved', 'true');
                  break;
                }
                
                if (pr.state !== 'open') {
                  console.log('PR is no longer open');
                  core.setFailed('PR was closed without approval');
                  break;
                }
                
                console.log('Waiting for PR approval...');
                await new Promise(resolve => setTimeout(resolve, 10000)); // Wait 10 seconds
                attempts++;
              } catch (error) {
                console.log(`Error checking PR status: ${error.message}`);
                core.setFailed(error.message);
                break;
              }
            }
            
            if (attempts >= maxAttempts) {
              core.setFailed('Timeout waiting for PR approval');
            }

      - name: Merge PR and Deploy
        if: success() && steps.wait-for-review.outputs.approved == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            try {
              const response = await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: ${{ steps.create-pr.outputs.pr_number }},
                merge_method: 'squash'
              });
              
              console.log('Merge successful:', response.data.message);
              
              // Trigger Vercel deployment
              const deployHookUrl = process.env.VERCEL_DEPLOY_HOOK_URL;
              const fetch = require('node-fetch');
              await fetch(deployHookUrl, { method: 'POST' });
              console.log('Vercel deployment triggered');
              
            } catch (error) {
              core.setFailed(`Action failed: ${error.message}`);
            }
        env:
          VERCEL_DEPLOY_HOOK_URL: ${{ secrets.VERCEL_DEPLOY_HOOK_URL }}